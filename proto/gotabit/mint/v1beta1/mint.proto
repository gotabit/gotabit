syntax = "proto3";
package gotabit.mint.v1beta1;

option go_package = "github.com/gotabit/gotabit/x/mint/types";

import "gogoproto/gogo.proto";

// Minter represents the minting state.
message Minter {
  // epoch_provisions represent rewards for the current epoch.
  string epoch_provisions = 1 [
    (gogoproto.moretags) = "yaml:\"epoch_provisions\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// DistributionProportions defines the distribution proportions of the minted
// denom. In other words, defines which stakeholders will receive the minted
// denoms and how much.
message DistributionProportions {
  // staking defines the proportion of the minted mint_denom that is to be
  // allocated as staking rewards.
  string staking = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"staking\"",
    (gogoproto.nullable) = false
  ];
  // eco_fund_pool defines the proportion of the minted mint_denom that is
  // to be allocated as pool incentives.
  string eco_fund_pool = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"eco_fund_pool\"",
    (gogoproto.nullable) = false
  ];

  string developer_fund_pool = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"developer_fund_pool\"",
    (gogoproto.nullable) = false
  ];
  // community_pool defines the proportion of the minted mint_denom that is
  // to be allocated to the community pool.
  string community_pool = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"community_pool\"",
    (gogoproto.nullable) = false
  ];
}

// Params holds parameters for the x/mint module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  // mint_denom is the denom of the coin to mint.
  string mint_denom = 1;
  // genesis_epoch_provisions epoch provisions from the first epoch.
  string genesis_epoch_provisions = 2 [
    (gogoproto.moretags) = "yaml:\"genesis_epoch_provisions\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // epoch_identifier mint epoch identifier e.g. (day, week).
  string epoch_identifier = 3
      [ (gogoproto.moretags) = "yaml:\"epoch_identifier\"" ];
  // reduction_period_in_epochs the number of epochs it takes
  // to reduce the rewards.
  int64 reduction_period_in_epochs = 4
      [ (gogoproto.moretags) = "yaml:\"reduction_period_in_epochs\"" ];
  // reduction_factor is the reduction multiplier to execute
  // at the end of each period set by reduction_period_in_epochs.
  string reduction_factor = 5 [
    (gogoproto.moretags) = "yaml:\"reduction_factor\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // distribution_proportions defines the distribution proportions of the minted
  // denom. In other words, defines which stakeholders will receive the minted
  // denoms and how much.
  DistributionProportions distribution_proportions = 6
      [ (gogoproto.nullable) = false ];
  // minting_rewards_distribution_start_epoch start epoch to distribute minting
  // rewards
  int64 minting_rewards_distribution_start_epoch = 7
      [ (gogoproto.moretags) =
            "yaml:\"minting_rewards_distribution_start_epoch\"" ];

  string eco_fund_pool_address = 8
  [ (gogoproto.moretags) = "yaml:\"eco_fund_pool_address\"" ];

  string developer_fund_pool_address = 9
  [ (gogoproto.moretags) = "yaml:\"developer_fund_pool_address\"" ];
}
